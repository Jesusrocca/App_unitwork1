{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1oBNTFebSbm5yTyJNOluidH4xgE6vLmdS",
      "authorship_tag": "ABX9TyPTri0mhAamZrVKjdt2vqTI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jesusrocca/App_unitwork1/blob/main/Data%20analysis%20and%20exploration\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importamos librerias"
      ],
      "metadata": {
        "id": "2QXr6q6mng3y"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "tOHbl88_nWpr"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cargamos los datos"
      ],
      "metadata": {
        "id": "mmNnKTgGnn5c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d3c-phAUnmn8",
        "outputId": "14d312e2-4948-4000-a131-d81640f9e357"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Banana_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/AnaÃÅlisis y exploratorio de datos/banana_quality.csv')\n",
        "Banana_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "YOVRpH3Uprhs",
        "outputId": "434fe668-b395-47d2-b2b5-15b4b83f8e84"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Size    Weight  Sweetness  Softness  HarvestTime  Ripeness  \\\n",
              "0    -1.924968  0.468078   3.077832 -1.472177     0.294799  2.435570   \n",
              "1    -2.409751  0.486870   0.346921 -2.495099    -0.892213  2.067549   \n",
              "2    -0.357607  1.483176   1.568452 -2.645145    -0.647267  3.090643   \n",
              "3    -0.868524  1.566201   1.889605 -1.273761    -1.006278  1.873001   \n",
              "4     0.651825  1.319199  -0.022459 -1.209709    -1.430692  1.078345   \n",
              "...        ...       ...        ...       ...          ...       ...   \n",
              "7995 -6.414403  0.723565   1.134953  2.952763     0.297928 -0.156946   \n",
              "7996  0.851143 -2.217875  -2.812175  0.489249    -1.323410 -2.316883   \n",
              "7997  1.422722 -1.907665  -2.532364  0.964976    -0.562375 -1.834765   \n",
              "7998 -2.131904 -2.742600  -1.008029  2.126946    -0.802632 -3.580266   \n",
              "7999 -2.660879 -2.044666   0.159026  1.499706    -1.581856 -1.605859   \n",
              "\n",
              "       Acidity Quality  \n",
              "0     0.271290    Good  \n",
              "1     0.307325    Good  \n",
              "2     1.427322    Good  \n",
              "3     0.477862    Good  \n",
              "4     2.812442    Good  \n",
              "...        ...     ...  \n",
              "7995  2.398091     Bad  \n",
              "7996  2.113136     Bad  \n",
              "7997  0.697361     Bad  \n",
              "7998  0.423569     Bad  \n",
              "7999  1.435644     Bad  \n",
              "\n",
              "[8000 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a0c1efe-c02a-4970-b7e9-08c14a84e230\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Size</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Sweetness</th>\n",
              "      <th>Softness</th>\n",
              "      <th>HarvestTime</th>\n",
              "      <th>Ripeness</th>\n",
              "      <th>Acidity</th>\n",
              "      <th>Quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.924968</td>\n",
              "      <td>0.468078</td>\n",
              "      <td>3.077832</td>\n",
              "      <td>-1.472177</td>\n",
              "      <td>0.294799</td>\n",
              "      <td>2.435570</td>\n",
              "      <td>0.271290</td>\n",
              "      <td>Good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-2.409751</td>\n",
              "      <td>0.486870</td>\n",
              "      <td>0.346921</td>\n",
              "      <td>-2.495099</td>\n",
              "      <td>-0.892213</td>\n",
              "      <td>2.067549</td>\n",
              "      <td>0.307325</td>\n",
              "      <td>Good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.357607</td>\n",
              "      <td>1.483176</td>\n",
              "      <td>1.568452</td>\n",
              "      <td>-2.645145</td>\n",
              "      <td>-0.647267</td>\n",
              "      <td>3.090643</td>\n",
              "      <td>1.427322</td>\n",
              "      <td>Good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.868524</td>\n",
              "      <td>1.566201</td>\n",
              "      <td>1.889605</td>\n",
              "      <td>-1.273761</td>\n",
              "      <td>-1.006278</td>\n",
              "      <td>1.873001</td>\n",
              "      <td>0.477862</td>\n",
              "      <td>Good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.651825</td>\n",
              "      <td>1.319199</td>\n",
              "      <td>-0.022459</td>\n",
              "      <td>-1.209709</td>\n",
              "      <td>-1.430692</td>\n",
              "      <td>1.078345</td>\n",
              "      <td>2.812442</td>\n",
              "      <td>Good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7995</th>\n",
              "      <td>-6.414403</td>\n",
              "      <td>0.723565</td>\n",
              "      <td>1.134953</td>\n",
              "      <td>2.952763</td>\n",
              "      <td>0.297928</td>\n",
              "      <td>-0.156946</td>\n",
              "      <td>2.398091</td>\n",
              "      <td>Bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7996</th>\n",
              "      <td>0.851143</td>\n",
              "      <td>-2.217875</td>\n",
              "      <td>-2.812175</td>\n",
              "      <td>0.489249</td>\n",
              "      <td>-1.323410</td>\n",
              "      <td>-2.316883</td>\n",
              "      <td>2.113136</td>\n",
              "      <td>Bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7997</th>\n",
              "      <td>1.422722</td>\n",
              "      <td>-1.907665</td>\n",
              "      <td>-2.532364</td>\n",
              "      <td>0.964976</td>\n",
              "      <td>-0.562375</td>\n",
              "      <td>-1.834765</td>\n",
              "      <td>0.697361</td>\n",
              "      <td>Bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7998</th>\n",
              "      <td>-2.131904</td>\n",
              "      <td>-2.742600</td>\n",
              "      <td>-1.008029</td>\n",
              "      <td>2.126946</td>\n",
              "      <td>-0.802632</td>\n",
              "      <td>-3.580266</td>\n",
              "      <td>0.423569</td>\n",
              "      <td>Bad</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7999</th>\n",
              "      <td>-2.660879</td>\n",
              "      <td>-2.044666</td>\n",
              "      <td>0.159026</td>\n",
              "      <td>1.499706</td>\n",
              "      <td>-1.581856</td>\n",
              "      <td>-1.605859</td>\n",
              "      <td>1.435644</td>\n",
              "      <td>Bad</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8000 rows √ó 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a0c1efe-c02a-4970-b7e9-08c14a84e230')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6a0c1efe-c02a-4970-b7e9-08c14a84e230 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6a0c1efe-c02a-4970-b7e9-08c14a84e230');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-db1c0294-2916-45db-905b-4da9ee6ec92c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db1c0294-2916-45db-905b-4da9ee6ec92c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-db1c0294-2916-45db-905b-4da9ee6ec92c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3d480133-cc70-4861-8f8d-e2e5a39c7918\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Banana_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3d480133-cc70-4861-8f8d-e2e5a39c7918 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Banana_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Banana_df",
              "summary": "{\n  \"name\": \"Banana_df\",\n  \"rows\": 8000,\n  \"fields\": [\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1360227918920454,\n        \"min\": -7.9980736,\n        \"max\": 7.9708004,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -1.1823753,\n          -2.1902218,\n          -0.01742254\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.015934252771929,\n        \"min\": -8.283002,\n        \"max\": 5.679692,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -1.5233536,\n          -2.8090863,\n          1.1875557\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sweetness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9484548834162483,\n        \"min\": -6.4340215,\n        \"max\": 7.539374,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -1.3909012,\n          -1.3944167,\n          4.7572994\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Softness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.065215944309168,\n        \"min\": -6.9593196,\n        \"max\": 8.241555,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -0.850838,\n          2.6063178,\n          1.0700845\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HarvestTime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9966607874097069,\n        \"min\": -7.5700083,\n        \"max\": 6.29328,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -0.13659394,\n          -0.016427217,\n          -2.5047512\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ripeness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1142893721428417,\n        \"min\": -7.4231553,\n        \"max\": 7.2490335,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          2.3312151,\n          5.5374675,\n          -1.0434868\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2934666385409743,\n        \"min\": -8.226977,\n        \"max\": 7.4116335,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -1.8286724,\n          -4.9408426,\n          2.5416763\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Bad\",\n          \"Good\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Tipos de datos\n",
        "Banana_df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fUKOkK_IoeB2",
        "outputId": "8fd376d5-3f6f-4538-e4b6-694596efa2ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Size           float64\n",
              "Weight         float64\n",
              "Sweetness      float64\n",
              "Softness       float64\n",
              "HarvestTime    float64\n",
              "Ripeness       float64\n",
              "Acidity        float64\n",
              "Quality         object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Numero de varaibles de cada tipo\n",
        "Banana_df.dtypes.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6mj0zQM-pJo1",
        "outputId": "4cf621bf-9b53-4e9d-b2b7-e7047c7fedb3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "float64    7\n",
              "object     1\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Banana_df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cv4J0mNDpUQe",
        "outputId": "d533c1bb-ca40-4a6b-c5a5-8c45f518ed88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8000, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Existen datos nulos\n",
        "Banana_df.isnull().any()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I2VmmPZ7qRx1",
        "outputId": "87166a27-9c22-4067-9992-d8f95bd916eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Size           False\n",
              "Weight         False\n",
              "Sweetness      False\n",
              "Softness       False\n",
              "HarvestTime    False\n",
              "Ripeness       False\n",
              "Acidity        False\n",
              "Quality        False\n",
              "dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Descripcion de todas las variables\n",
        "Banana_df.describe(include=\"all\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "_5Uz5d4Zqa6N",
        "outputId": "f2e3dbc3-9284-4ab0-873d-0b944a0882e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Size       Weight    Sweetness     Softness  HarvestTime  \\\n",
              "count   8000.000000  8000.000000  8000.000000  8000.000000  8000.000000   \n",
              "unique          NaN          NaN          NaN          NaN          NaN   \n",
              "top             NaN          NaN          NaN          NaN          NaN   \n",
              "freq            NaN          NaN          NaN          NaN          NaN   \n",
              "mean      -0.747802    -0.761019    -0.770224    -0.014441    -0.751288   \n",
              "std        2.136023     2.015934     1.948455     2.065216     1.996661   \n",
              "min       -7.998074    -8.283002    -6.434022    -6.959320    -7.570008   \n",
              "25%       -2.277651    -2.223574    -2.107329    -1.590458    -2.120659   \n",
              "50%       -0.897514    -0.868659    -1.020673     0.202644    -0.934192   \n",
              "75%        0.654216     0.775491     0.311048     1.547120     0.507326   \n",
              "max        7.970800     5.679692     7.539374     8.241555     6.293280   \n",
              "\n",
              "           Ripeness      Acidity Quality  \n",
              "count   8000.000000  8000.000000    8000  \n",
              "unique          NaN          NaN       2  \n",
              "top             NaN          NaN    Good  \n",
              "freq            NaN          NaN    4006  \n",
              "mean       0.781098     0.008725     NaN  \n",
              "std        2.114289     2.293467     NaN  \n",
              "min       -7.423155    -8.226977     NaN  \n",
              "25%       -0.574226    -1.629450     NaN  \n",
              "50%        0.964952     0.098735     NaN  \n",
              "75%        2.261650     1.682063     NaN  \n",
              "max        7.249034     7.411633     NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3b11049f-8a3c-45b8-b3b5-5593c14fb086\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Size</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Sweetness</th>\n",
              "      <th>Softness</th>\n",
              "      <th>HarvestTime</th>\n",
              "      <th>Ripeness</th>\n",
              "      <th>Acidity</th>\n",
              "      <th>Quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8000.000000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>8000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-0.747802</td>\n",
              "      <td>-0.761019</td>\n",
              "      <td>-0.770224</td>\n",
              "      <td>-0.014441</td>\n",
              "      <td>-0.751288</td>\n",
              "      <td>0.781098</td>\n",
              "      <td>0.008725</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.136023</td>\n",
              "      <td>2.015934</td>\n",
              "      <td>1.948455</td>\n",
              "      <td>2.065216</td>\n",
              "      <td>1.996661</td>\n",
              "      <td>2.114289</td>\n",
              "      <td>2.293467</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-7.998074</td>\n",
              "      <td>-8.283002</td>\n",
              "      <td>-6.434022</td>\n",
              "      <td>-6.959320</td>\n",
              "      <td>-7.570008</td>\n",
              "      <td>-7.423155</td>\n",
              "      <td>-8.226977</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-2.277651</td>\n",
              "      <td>-2.223574</td>\n",
              "      <td>-2.107329</td>\n",
              "      <td>-1.590458</td>\n",
              "      <td>-2.120659</td>\n",
              "      <td>-0.574226</td>\n",
              "      <td>-1.629450</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-0.897514</td>\n",
              "      <td>-0.868659</td>\n",
              "      <td>-1.020673</td>\n",
              "      <td>0.202644</td>\n",
              "      <td>-0.934192</td>\n",
              "      <td>0.964952</td>\n",
              "      <td>0.098735</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.654216</td>\n",
              "      <td>0.775491</td>\n",
              "      <td>0.311048</td>\n",
              "      <td>1.547120</td>\n",
              "      <td>0.507326</td>\n",
              "      <td>2.261650</td>\n",
              "      <td>1.682063</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>7.970800</td>\n",
              "      <td>5.679692</td>\n",
              "      <td>7.539374</td>\n",
              "      <td>8.241555</td>\n",
              "      <td>6.293280</td>\n",
              "      <td>7.249034</td>\n",
              "      <td>7.411633</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b11049f-8a3c-45b8-b3b5-5593c14fb086')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3b11049f-8a3c-45b8-b3b5-5593c14fb086 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3b11049f-8a3c-45b8-b3b5-5593c14fb086');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0e4edc39-4e53-4347-8567-9a057d5f5808\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e4edc39-4e53-4347-8567-9a057d5f5808')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0e4edc39-4e53-4347-8567-9a057d5f5808 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Banana_df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2828.489220146718,\n        \"min\": -7.9980736,\n        \"max\": 8000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.747801801669379,\n          -0.89751402,\n          8000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2828.615017113855,\n        \"min\": -8.283002,\n        \"max\": 8000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.7610193750192439,\n          -0.868658975,\n          8000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sweetness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2828.4567956678434,\n        \"min\": -6.4340215,\n        \"max\": 8000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.7702241042843923,\n          -1.0206731,\n          8000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Softness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2828.253863829764,\n        \"min\": -6.9593196,\n        \"max\": 8000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.014440881038258795,\n          0.20264395,\n          8000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HarvestTime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2828.5600581614904,\n        \"min\": -7.5700083,\n        \"max\": 8000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.7512883019195963,\n          -0.93419198,\n          8000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ripeness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2828.1586188491356,\n        \"min\": -7.4231553,\n        \"max\": 8000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.7810983560473437,\n          0.96495169,\n          8000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2828.347741846063,\n        \"min\": -8.226977,\n        \"max\": 8000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.008725080184739966,\n          0.09873514,\n          8000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"4006\",\n          \"8000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Solo varaibles categoriacs\n",
        "Banana_df.describe(include=object)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "0p96IaCOrL1c",
        "outputId": "e86d9421-c762-4571-bff7-718541ba3907"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Quality\n",
              "count     8000\n",
              "unique       2\n",
              "top       Good\n",
              "freq      4006"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-18d78daf-61ef-4349-b34b-4abfe148adee\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>8000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>4006</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-18d78daf-61ef-4349-b34b-4abfe148adee')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-18d78daf-61ef-4349-b34b-4abfe148adee button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-18d78daf-61ef-4349-b34b-4abfe148adee');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e8b4694b-31f2-4421-8895-93a4a2aeacad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8b4694b-31f2-4421-8895-93a4a2aeacad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e8b4694b-31f2-4421-8895-93a4a2aeacad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Banana_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Quality\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"4006\",\n          \"8000\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(Banana_df['Quality']\n",
        " .value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aZgpKd1-sJ77",
        "outputId": "5759de7b-9fcb-465c-a735-39cea8907aec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Good    4006\n",
              "Bad     3994\n",
              "Name: Quality, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(Banana_df['Quality']\n",
        " .value_counts()\n",
        " .plot(kind='bar')\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "K7F5DkA5zfF1",
        "outputId": "e5b7a113-e081-454f-860d-b9dce74d0302"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "#Proporciones por de babanas (buenis y malos)\n",
        "Banana_df['X'] = ''\n",
        "sns.displot(\n",
        "    data=Banana_df,\n",
        "    x='X',\n",
        "    hue='Quality',\n",
        "    multiple = 'fill'\n",
        ")"
      ],
      "metadata": {
        "id": "spVkCK-R0kGn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "outputId": "80f00ccf-2446-442b-d1bb-5a426d0ea305"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x78e87d6488b0>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 586.625x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Tendencias de medida central\n",
        "#Promedio o media\n",
        "Banana_df.mean() #Pandas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LlhHUVqjvHWO",
        "outputId": "efc8dbb0-2ea4-42cc-eebd-ed7b567b2654"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-db564392471d>:3: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  Banana_df.mean() #Pandas\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Size          -0.747802\n",
              "Weight        -0.761019\n",
              "Sweetness     -0.770224\n",
              "Softness      -0.014441\n",
              "HarvestTime   -0.751288\n",
              "Ripeness       0.781098\n",
              "Acidity        0.008725\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Mediana\n",
        "Banana_df.median()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQc9D46lvufQ",
        "outputId": "c6a55c60-5703-4d91-9211-69e10d943329"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-b880eff4f156>:2: FutureWarning: The default value of numeric_only in DataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  Banana_df.median()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Size          -0.897514\n",
              "Weight        -0.868659\n",
              "Sweetness     -1.020673\n",
              "Softness       0.202644\n",
              "HarvestTime   -0.934192\n",
              "Ripeness       0.964952\n",
              "Acidity        0.098735\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Moda\n",
        "Banana_df.mode()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "BqibNaEpv8EI",
        "outputId": "7e8d43d2-cece-4d02-ea90-62c06ae6729c"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Size    Weight  Sweetness  Softness  HarvestTime  Ripeness  \\\n",
              "0    -7.998074 -8.283002  -6.434022 -6.959320    -7.570008 -7.423155   \n",
              "1    -7.358084 -7.103426  -6.066777 -6.598226    -7.427180 -6.782773   \n",
              "2    -6.741400 -6.609340  -5.893079 -6.570272    -7.164973 -6.416545   \n",
              "3    -6.719175 -6.607514  -5.808879 -6.547687    -7.045869 -6.392600   \n",
              "4    -6.677118 -6.480937  -5.708583 -6.399932    -6.621631 -6.215241   \n",
              "...        ...       ...        ...       ...          ...       ...   \n",
              "7995  6.203820  4.790922   6.211078  6.124278     5.666310  6.874187   \n",
              "7996  6.218340  4.935854   6.365144  6.289935     5.738258  7.061900   \n",
              "7997  6.225920  4.938310   6.438196  6.319596     5.942060  7.077372   \n",
              "7998  7.688493  5.184198   6.702157  6.789940     6.051612  7.148525   \n",
              "7999  7.970800  5.679692   7.539374  8.241555     6.293280  7.249034   \n",
              "\n",
              "       Acidity Quality    X  \n",
              "0    -8.226977    Good       \n",
              "1    -8.216378     NaN  NaN  \n",
              "2    -8.113074     NaN  NaN  \n",
              "3    -7.805668     NaN  NaN  \n",
              "4    -7.674934     NaN  NaN  \n",
              "...        ...     ...  ...  \n",
              "7995  6.395850     NaN  NaN  \n",
              "7996  6.476621     NaN  NaN  \n",
              "7997  6.529665     NaN  NaN  \n",
              "7998  6.630081     NaN  NaN  \n",
              "7999  7.411633     NaN  NaN  \n",
              "\n",
              "[8000 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-379d0ae9-dc1b-4407-aff1-b1c63868caad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Size</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Sweetness</th>\n",
              "      <th>Softness</th>\n",
              "      <th>HarvestTime</th>\n",
              "      <th>Ripeness</th>\n",
              "      <th>Acidity</th>\n",
              "      <th>Quality</th>\n",
              "      <th>X</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-7.998074</td>\n",
              "      <td>-8.283002</td>\n",
              "      <td>-6.434022</td>\n",
              "      <td>-6.959320</td>\n",
              "      <td>-7.570008</td>\n",
              "      <td>-7.423155</td>\n",
              "      <td>-8.226977</td>\n",
              "      <td>Good</td>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-7.358084</td>\n",
              "      <td>-7.103426</td>\n",
              "      <td>-6.066777</td>\n",
              "      <td>-6.598226</td>\n",
              "      <td>-7.427180</td>\n",
              "      <td>-6.782773</td>\n",
              "      <td>-8.216378</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-6.741400</td>\n",
              "      <td>-6.609340</td>\n",
              "      <td>-5.893079</td>\n",
              "      <td>-6.570272</td>\n",
              "      <td>-7.164973</td>\n",
              "      <td>-6.416545</td>\n",
              "      <td>-8.113074</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-6.719175</td>\n",
              "      <td>-6.607514</td>\n",
              "      <td>-5.808879</td>\n",
              "      <td>-6.547687</td>\n",
              "      <td>-7.045869</td>\n",
              "      <td>-6.392600</td>\n",
              "      <td>-7.805668</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-6.677118</td>\n",
              "      <td>-6.480937</td>\n",
              "      <td>-5.708583</td>\n",
              "      <td>-6.399932</td>\n",
              "      <td>-6.621631</td>\n",
              "      <td>-6.215241</td>\n",
              "      <td>-7.674934</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7995</th>\n",
              "      <td>6.203820</td>\n",
              "      <td>4.790922</td>\n",
              "      <td>6.211078</td>\n",
              "      <td>6.124278</td>\n",
              "      <td>5.666310</td>\n",
              "      <td>6.874187</td>\n",
              "      <td>6.395850</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7996</th>\n",
              "      <td>6.218340</td>\n",
              "      <td>4.935854</td>\n",
              "      <td>6.365144</td>\n",
              "      <td>6.289935</td>\n",
              "      <td>5.738258</td>\n",
              "      <td>7.061900</td>\n",
              "      <td>6.476621</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7997</th>\n",
              "      <td>6.225920</td>\n",
              "      <td>4.938310</td>\n",
              "      <td>6.438196</td>\n",
              "      <td>6.319596</td>\n",
              "      <td>5.942060</td>\n",
              "      <td>7.077372</td>\n",
              "      <td>6.529665</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7998</th>\n",
              "      <td>7.688493</td>\n",
              "      <td>5.184198</td>\n",
              "      <td>6.702157</td>\n",
              "      <td>6.789940</td>\n",
              "      <td>6.051612</td>\n",
              "      <td>7.148525</td>\n",
              "      <td>6.630081</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7999</th>\n",
              "      <td>7.970800</td>\n",
              "      <td>5.679692</td>\n",
              "      <td>7.539374</td>\n",
              "      <td>8.241555</td>\n",
              "      <td>6.293280</td>\n",
              "      <td>7.249034</td>\n",
              "      <td>7.411633</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8000 rows √ó 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-379d0ae9-dc1b-4407-aff1-b1c63868caad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-379d0ae9-dc1b-4407-aff1-b1c63868caad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-379d0ae9-dc1b-4407-aff1-b1c63868caad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-beac6d3c-9c0a-40ed-9845-4f0491ee9652\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-beac6d3c-9c0a-40ed-9845-4f0491ee9652')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-beac6d3c-9c0a-40ed-9845-4f0491ee9652 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Banana_df\",\n  \"rows\": 8000,\n  \"fields\": [\n    {\n      \"column\": \"Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.136022791892045,\n        \"min\": -7.9980736,\n        \"max\": 7.9708004,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -2.11124,\n          -1.8413053,\n          -2.553062\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.015934252771929,\n        \"min\": -8.283002,\n        \"max\": 5.679692,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -2.0708961,\n          -1.8166023,\n          -2.495211\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sweetness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.948454883416248,\n        \"min\": -6.4340215,\n        \"max\": 7.539374,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -1.9852335,\n          -1.7825469,\n          -2.3126118\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Softness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.065215944309168,\n        \"min\": -6.9593196,\n        \"max\": 8.241555,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -1.4030337,\n          -1.0705918,\n          -1.869812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HarvestTime\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9966607874097069,\n        \"min\": -7.5700083,\n        \"max\": 6.29328,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -1.9862254,\n          -1.7527908,\n          -2.3607373\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ripeness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1142893721428417,\n        \"min\": -7.4231553,\n        \"max\": 7.2490335,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -0.37649283,\n          -0.06509438,\n          -0.9845376\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2934666385409743,\n        \"min\": -8.226977,\n        \"max\": 7.4116335,\n        \"num_unique_values\": 8000,\n        \"samples\": [\n          -1.4335482,\n          -1.0737938,\n          -1.9356908\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quality\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Good\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"X\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Valores maximos\n",
        "Banana_df.max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CQ4NyarPwYSy",
        "outputId": "49d6d166-d260-4095-f82e-10740f272878"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Size             7.9708\n",
              "Weight         5.679692\n",
              "Sweetness      7.539374\n",
              "Softness       8.241555\n",
              "HarvestTime     6.29328\n",
              "Ripeness       7.249034\n",
              "Acidity        7.411633\n",
              "Quality            Good\n",
              "X                      \n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Valores maximos\n",
        "Banana_df.min()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MkiietwawdV-",
        "outputId": "4d1aeeba-62d1-4b04-fc72-5864c76226fd"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Size          -7.998074\n",
              "Weight        -8.283002\n",
              "Sweetness     -6.434022\n",
              "Softness       -6.95932\n",
              "HarvestTime   -7.570008\n",
              "Ripeness      -7.423155\n",
              "Acidity       -8.226977\n",
              "Quality             Bad\n",
              "X                      \n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Rango de las variables\n",
        "Banana_df.max(numeric_only=True) - Banana_df.min(numeric_only=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZmTkN7S6wjTj",
        "outputId": "de64072d-12fc-47ad-f907-9404f8c508b4"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Size           15.968874\n",
              "Weight         13.962694\n",
              "Sweetness      13.973395\n",
              "Softness       15.200875\n",
              "HarvestTime    13.863288\n",
              "Ripeness       14.672189\n",
              "Acidity        15.638610\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#QUartiles\n",
        " (\n",
        "   Banana_df.quantile(q=[0.75,0.50,0.25])\n",
        "    .transpose()\n",
        "    .rename_axis('variable')\n",
        "    .reset_index()\n",
        "    .assign(\n",
        "        iqr=lambda df: df[0.75] - df[0.25]\n",
        "    )\n",
        "  )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 325
        },
        "id": "NF_g_S29zkLm",
        "outputId": "58b26120-0c62-4f6e-d0ff-2ac61d82b4b7"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-18-911578454a3e>:2: FutureWarning: The default value of numeric_only in DataFrame.quantile is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  Banana_df.quantile(q=[0.75,0.50,0.25])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      variable      0.75       0.5      0.25       iqr\n",
              "0         Size  0.654216 -0.897514 -2.277651  2.931867\n",
              "1       Weight  0.775491 -0.868659 -2.223574  2.999066\n",
              "2    Sweetness  0.311048 -1.020673 -2.107329  2.418377\n",
              "3     Softness  1.547120  0.202644 -1.590458  3.137578\n",
              "4  HarvestTime  0.507326 -0.934192 -2.120659  2.627985\n",
              "5     Ripeness  2.261650  0.964952 -0.574226  2.835876\n",
              "6      Acidity  1.682063  0.098735 -1.629450  3.311513"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c89b322d-6e72-4a53-aea1-14870573774e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>variable</th>\n",
              "      <th>0.75</th>\n",
              "      <th>0.5</th>\n",
              "      <th>0.25</th>\n",
              "      <th>iqr</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Size</td>\n",
              "      <td>0.654216</td>\n",
              "      <td>-0.897514</td>\n",
              "      <td>-2.277651</td>\n",
              "      <td>2.931867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Weight</td>\n",
              "      <td>0.775491</td>\n",
              "      <td>-0.868659</td>\n",
              "      <td>-2.223574</td>\n",
              "      <td>2.999066</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Sweetness</td>\n",
              "      <td>0.311048</td>\n",
              "      <td>-1.020673</td>\n",
              "      <td>-2.107329</td>\n",
              "      <td>2.418377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Softness</td>\n",
              "      <td>1.547120</td>\n",
              "      <td>0.202644</td>\n",
              "      <td>-1.590458</td>\n",
              "      <td>3.137578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HarvestTime</td>\n",
              "      <td>0.507326</td>\n",
              "      <td>-0.934192</td>\n",
              "      <td>-2.120659</td>\n",
              "      <td>2.627985</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Ripeness</td>\n",
              "      <td>2.261650</td>\n",
              "      <td>0.964952</td>\n",
              "      <td>-0.574226</td>\n",
              "      <td>2.835876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Acidity</td>\n",
              "      <td>1.682063</td>\n",
              "      <td>0.098735</td>\n",
              "      <td>-1.629450</td>\n",
              "      <td>3.311513</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c89b322d-6e72-4a53-aea1-14870573774e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c89b322d-6e72-4a53-aea1-14870573774e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c89b322d-6e72-4a53-aea1-14870573774e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-10d700b5-f541-4cf3-b895-58a780730e6e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-10d700b5-f541-4cf3-b895-58a780730e6e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-10d700b5-f541-4cf3-b895-58a780730e6e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"  )\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"variable\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Size\",\n          \"Weight\",\n          \"Ripeness\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0.75,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7263683542769038,\n        \"min\": 0.311047995,\n        \"max\": 2.2616504500000003,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.65421606,\n          0.775491475,\n          2.2616504500000003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0.5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7741376658216536,\n        \"min\": -1.0206731,\n        \"max\": 0.96495169,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.89751402,\n          -0.868658975,\n          0.96495169\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0.25,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6027046351729429,\n        \"min\": -2.2776506999999997,\n        \"max\": -0.574225625,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -2.2776506999999997,\n          -2.2235744,\n          -0.574225625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"iqr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30179380872671957,\n        \"min\": 2.41837737,\n        \"max\": 3.31151285,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2.9318667599999997,\n          2.999065875,\n          2.8358760750000003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "#visualizacion de distribucion de una variable\n",
        "sns.histplot(\n",
        "    data=Banana_df,\n",
        ")\n",
        "#A√±ado una linea roja del promedio\n",
        "plt.axvline(\n",
        "    x=Banana_df.Size.mean(),\n",
        "    color ='red',\n",
        "    linestyle = 'dashed',\n",
        "    linewidth=2\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "cbhaDgWI0TOu",
        "outputId": "95a5f9c3-b6ed-4ad3-a875-f14f9b9a0ad7"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.lines.Line2D at 0x78e878dd0c10>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear un subconjunto de datos con las variables que deseas graficar\n",
        "subset_df = Banana_df[['Size', 'Weight', 'Sweetness', 'Softness', 'HarvestTime', 'Ripeness', 'Acidity']]\n",
        "\n",
        "# Definir el n√∫mero de filas y columnas para la cuadr√≠cula de subgr√°ficos\n",
        "num_rows = 3\n",
        "num_cols = 3\n",
        "\n",
        "# Crear una figura y una matriz de subgr√°ficos\n",
        "fig, axes = plt.subplots(num_rows, num_cols, figsize=(10, 10))\n",
        "\n",
        "# Aplanar la matriz de subgr√°ficos para iterar sobre ella\n",
        "axes = axes.flatten()\n",
        "\n",
        "# Iterar sobre las columnas del DataFrame y dibujar un histograma en cada subgr√°fico\n",
        "for i, column in enumerate(subset_df.columns):\n",
        "    sns.histplot(data=subset_df, x=column, kde=True, ax=axes[i])  # Puedes ajustar kde a False si no deseas el ajuste de la distribuci√≥n\n",
        "    axes[i].set_xlabel('Valor')\n",
        "    axes[i].set_ylabel('Frecuencia')\n",
        "    axes[i].set_title(f'Distribuci√≥n de {column}')\n",
        "\n",
        "# Ajustar el espaciado entre los subgr√°ficos\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "VWBCwuiF1Y7N",
        "outputId": "293fe4d3-6a3f-4946-e648-896405a95711"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Diagrama de caja, Analisis por el tama√±o y calidad\n",
        "sns.boxplot(\n",
        "    data=Banana_df,\n",
        "    x='Size',\n",
        "    y='Quality'\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "6c5HG41Z2pWZ",
        "outputId": "2f983535-5ebb-45d6-b342-f914c40f8202"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Size', ylabel='Quality'>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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kgceeIBjjz2WGjVq0KlTJ5YtWxb2SDExefJkzjjjDJKSkmjYsCG9evVi3bp1YY9Vpu644w4ikQjXXXdd2KPEzFdffcWAAQM46qijqFmzJqeccgrvv/9+2GPFTH5+PmPHji1yXPn73/9+0N9VFmtGUQV04YUX8sMPP/C///u//Otf/+LUU0/lwgsvZNu2bWGPFhPPPPMMl112GVdccQX//ve/ee+99/jP//zPsMcqEzfccANNmzYNe4yYWrt2LQUFBTz00EOsXr2ae+65hwcffJCbb7457NFK7YknnmDkyJGMGzeOFStWcOqpp3Luuefy9ddfhz3aIXv77bdJT08nMzOTRYsWsX//fs455xy+++67sEcrE8uXL+ehhx6ibdu2YY8SMzt37qRLly5Ur16dV155hTVr1nDXXXdx5JFHhj1azNx5553MnDmT6dOn8/HHH3PnnXcyZcoUpk2bVr6DBKpQduzYEQDBkiVLostycnICIFi0aFGIk8XG/v37g6OPPjp49NFHwx6lzL388svBiSeeGKxevToAgpUrV4Y9UpmZMmVKkJqaGvYYpdaxY8cgPT09+nl+fn7QtGnTYPLkySFOVTa+/vrrAAjefvvtsEeJud27dwfHH398sGjRouDMM88MRowYEfZIMXHjjTcGXbt2DXuMMnXBBRcEV155ZZFlvXv3Dvr371+uc3imqII56qijOOGEE5gzZw7fffcdP/zwAw899BANGzakffv2YY93yFasWMFXX31FXFwc7dq1o0mTJpx33nl89NFHYY8WU9u3b+eqq67i8ccfp1atWmGPU+ays7OpV69e2GOUSl5eHv/617/o0aNHdFlcXBw9evQgIyMjxMnKRnZ2NkCl/fP6Lenp6VxwwQVF/iyrgueff54OHTrQp08fGjZsSLt27XjkkUfCHiumfve737F48WLWr18PwL///W/effddzjvvvHKdw18IW8FEIhHeeOMNevXqRVJSEnFxcTRs2JBXX321Spwq/fzzzwEYP348d999N8ceeyx33XUXZ511FuvXr68SB+ogCBg0aBBXX301HTp04Isvvgh7pDL16aefMm3aNKZOnRr2KKXyzTffkJ+fT6NGjYosb9SoEWvXrg1pqrJRUFDAddddR5cuXTj55JPDHiem5s+fz4oVK1i+fHnYo8Tc559/zsyZMxk5ciQ333wzy5cv59prryUhIYGBAweGPV5M3HTTTeTk5HDiiScSHx9Pfn4+kyZNon///uU6h2eKyslNN91EJBL5zY+1a9cSBAHp6ek0bNiQd955h2XLltGrVy8uuugitm7dGvZuHFBx96+goACAMWPGcMkll9C+fXtmzZpFJBLhqaeeCnkvfltx93HatGns3r2b0aNHhz1yiRR3/37qq6++omfPnvTp04errroqpMlVXOnp6Xz00UfMnz8/7FFiatOmTYwYMYJ58+ZRo0aNsMeJuYKCAk4//XRuv/122rVrx5AhQ7jqqqt48MEHwx4tZp588knmzZvHP//5T1asWMFjjz3G1KlTeeyxx8p1Dn/NRznZsWMH33777W/ep0WLFrzzzjucc8457Ny5kzp16kTXHX/88QwePJibbrqprEctleLu33vvvccf/vAH3nnnHbp27Rpd16lTJ3r06MGkSZPKetRSK+4+9u3blxdeeIFIJBJdnp+fT3x8PP379y/3f+TFVdz9S0hIAGDLli2cddZZdO7cmdmzZxMXVzn/HysvL49atWrx9NNPF3kV5MCBA9m1axfPPfdceMPF0PDhw3nuuedYsmQJqampYY8TUwsXLuTPf/4z8fHx0WX5+flEIhHi4uLIzc0tsq6yad68OWeffTaPPvpodNnMmTOZOHEiX331VYiTxU6zZs246aabSE9Pjy6bOHEic+fOLdcztj59Vk4aNGhAgwYNDnq/vXv3AvziASYuLi56lqUiKu7+tW/fnsTERNatWxeNov379/PFF1/QvHnzsh7zkBR3H++//34mTpwY/XzLli2ce+65PPHEE3Tq1KksRzwkxd0/+PEMUffu3aNn+iprEAEkJCTQvn17Fi9eHI2igoICFi9ezPDhw8MdLgaCIOCaa65hwYIFvPXWW1UuiAD++Mc/8uGHHxZZdsUVV3DiiSdy4403VuogAujSpcsv3kZh/fr1Ff6YWRJ79+79xXEkPj6+/B/3yvWybh3Ujh07gqOOOiro3bt38MEHHwTr1q0LRo0aFVSvXj344IMPwh4vJkaMGBEcffTRwWuvvRasXbs2GDx4cNCwYcMgKysr7NHKxIYNG6rUq882b94ctGzZMvjjH/8YbN68Odi6dWv0o7KaP39+kJiYGMyePTtYs2ZNMGTIkKBu3brBtm3bwh7tkA0dOjRITk4O3nrrrSJ/Vnv37g17tDJVlV59tmzZsqBatWrBpEmTgk8++SSYN29eUKtWrWDu3LlhjxYzAwcODI4++ujgxRdfDDZs2BA8++yzQf369YMbbrihXOcwiiqg5cuXB+ecc05Qr169ICkpKejcuXPw8ssvhz1WzOTl5QV//etfg4YNGwZJSUlBjx49go8++ijsscpMVYuiWbNmBcCvflRm06ZNC1JSUoKEhISgY8eOQWZmZtgjxcSB/qxmzZoV9mhlqipFURAEwQsvvBCcfPLJQWJiYnDiiScGDz/8cNgjxVROTk4wYsSIICUlJahRo0bQokWLYMyYMUFubm65zuE1RZIkSfjqM0mSJMAokiRJAowiSZIkwCiSJEkCjCJJkiTAKJIkSQKMIkmSJMAokiRJAowiSYexSCTCwoULwx5DUgVhFEmqsnbs2MHQoUNJSUkhMTGRxo0bc+655/Lee+8BsHXrVs4777yQp5RUUVQLewBJKiuXXHIJeXl5PPbYY7Ro0YLt27ezePFivv32WwAaN24c8oSSKhLPFEmqknbt2sU777zDnXfeSffu3WnevDkdO3Zk9OjR/OlPfwKKPn02fvx4IpHILz5mz54NQEFBAZMnTyY1NZWaNWty6qmn8vTTT4e0d5LKglEkqUqqXbs2tWvXZuHCheTm5h70/qNGjWLr1q3Rj6lTp1KrVi06dOgAwOTJk5kzZw4PPvggq1ev5vrrr2fAgAG8/fbbZb0rkspJJAiCIOwhJKksPPPMM1x11VV8//33nH766Zx55plceumltG3bFvjxTNGCBQvo1atXka/LzMyke/fuPPbYY/Tt25fc3Fzq1avHG2+8QVpaWvR+f/nLX9i7dy///Oc/y3O3JJURzxRJqrIuueQStmzZwvPPP0/Pnj156623OP3006NPif2ajRs30qtXL0aNGkXfvn0B+PTTT9m7dy9nn3129AxU7dq1mTNnDp999lk57Y2ksuaZIkmHlb/85S8sWrSIL7/88hdnir777ju6dOlCamoqzz77LJFIBIClS5fSuXNn3nrrLY4++ugi20tMTKRZs2blvRuSyoCvPpN0WGnduvWvvjdREAQMGDCAgoICHn/88WgQFX5NYmIiGzdu5MwzzyzHaSWVJ6NIUpX07bff0qdPH6688kratm1LUlIS77//PlOmTOHiiy/+xf3Hjx/PG2+8weuvv86ePXvYs2cPAMnJySQlJTFq1Ciuv/56CgoK6Nq1K9nZ2bz33nvUqVOHgQMHlvfuSSoDRpGkKql27dp06tSJe+65h88++4z9+/fTrFkzrrrqKm6++eZf3P/tt99mz549/O53vyuyfNasWQwaNIi///3vNGjQgMmTJ/P5559Tt25dTj/99F/dlqTKyWuKJEmS8NVnkiRJgFEkSZIEGEWSJEmAUSRJkgQYRZIkSYBRJEmSBBhFkiRJgFEkSZIEGEWSJEmAUSRJkgQYRZIkSQD8P8QPsLQziG0GAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Diagrama de caja, Analisis por el tama√±o y Tiendo de cosecha\n",
        "sns.boxplot(\n",
        "    data=Banana_df,\n",
        "    x='HarvestTime',\n",
        "    y='Quality'\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "UGlgUJWI2_kZ",
        "outputId": "9873bac2-e16b-42ce-9f02-b829c1968db6"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='HarvestTime', ylabel='Quality'>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Diagrama de caja, Analisis por el tama√±o y suavidad\n",
        "sns.boxplot(\n",
        "    data=Banana_df,\n",
        "    x='Softness',\n",
        "    y='Quality'\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "VcPPCH4U3dFS",
        "outputId": "656e7723-5b02-4e22-d2a9-484b26fc8bf9"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Softness', ylabel='Quality'>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1nNcDVvv3m_w"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}